#include <raid.h>
#include "test_config.h"

#define TEST_ASSERT(cond, message) \
    if (!(cond)) { fprintf(stderr, "Assertion failed: \"%s\" - %s\n", #cond, message); return 1; }

#define TEST_ERR_CHECK(err) \
    if (err) { fprintf(stderr, "Error: %s!\n", hcs_error_to_string(err)); fprintf(stderr, "Code: %s\n", hcs->last_error_code); return 1; }

#define TEST_CALL(err, func_call)                                  \
    err = func_call;                                                    \
    if (err) { fprintf(stderr, "Error (%s): %s!\n", #func_call, hcs_error_to_string(err)); fprintf(stderr, "Code: %s\n", hcs->last_error_code); return 1; }

#define TEST_EXPECT_ERR(err, ex_err) \
    if (!err) { return 1; } \
    else if (err == ex_err) { \
        fprintf(stderr, "Expected error: %s!\n", hcs_error_to_string(err)); \
        return 0; \
    } else { \
        fprintf(stderr, "Unexpected error: %s!\n", hcs_error_to_string(err)); \
        return 1; \
    }

#define TEST_RUN(hcsptr, func) \
    printf("%s: %s\n\n", #func, func(hcsptr) ? "error" : "passed")

bool test_write_msgpack(raid_client_t* raid)
{
  raid_writer_t w;
  raid_writer_init(&w, raid);

  raid_write_array(&w, 5);
  raid_write_nil(&w);
  raid_write_int(&w, 42);
  raid_write_float(&w, 6.9);
  raid_write_string(&w, text, strlen(text));
  raid_write_mapf(&w, 2, "'number' %d 'string' %s", 1234, "Hello world");
  
  raid_writer_destroy(&w);
}

int main(int argc, char** argv)
{
  raid_client_t raid;
  raid_error_t err;

  err = raid_init(&raid, RAID_HOST, RAID_PORT);
  if (err != RAID_SUCCESS) {
    fprintf(stderr, "Error: %s!\n", raid_error_to_string(err));
    return EXIT_FAILURE;
  }

#ifdef RAID_TEST_CONN
  err = raid_connect(&raid);
  if (err != RAID_SUCCESS) {
    fprintf(stderr, "Error connecting: %s!\n", raid_error_to_string(err));
    return EXIT_FAILURE;
  }
#endif

  TEST_RUN(&raid, test_write_msgpack);
  TEST_RUN(&raid, test_write_read);
  TEST_RUN(&raid, test_read_garbage);

  raid_destroy(&raid);
  return EXIT_SUCCESS;
}
